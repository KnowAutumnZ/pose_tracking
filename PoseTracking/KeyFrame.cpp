#include "KeyFrame.h"

namespace PoseTracking
{
	// 下一个关键帧的id
	long unsigned int KeyFrame::nNextId = 0;

	//关键帧的构造函数
	KeyFrame::KeyFrame(Frame* F, Map *pMap, KeyFrameDatabase *pKFDB) :mnGridCols(FRAME_GRID_COLS), mnGridRows(FRAME_GRID_ROWS), mnFrameId(F->mnId),
		mfGridElementWidthInv(F->mfGridElementWidthInv), mfGridElementHeightInv(F->mfGridElementHeightInv), mvKeys(F->mvKeys), mDescriptors(F->mDescriptors.clone()),
		mnScaleLevels(F->mnScaleLevels), mfScaleFactor(F->mfScaleFactor),mfLogScaleFactor(F->mfLogScaleFactor), mvScaleFactors(F->mvScaleFactors),
		mnMinX(F->mnMinX), mnMinY(F->mnMinY), mnMaxX(F->mnMaxX), mnMaxY(F->mnMaxY),
		mvLevelSigma2(F->mvLevelSigma2), mvInvLevelSigma2(F->mvInvLevelSigma2), mvpMapPoints(F->mvpMapPoints), mbNotErase(false),mbToBeErased(false), mbBad(false),
		mpMap(pMap)
	{
		// 获取id
		mnId = nNextId++;

		// 根据指定的普通帧, 初始化用于加速匹配的网格对象信息; 其实就把每个网格中有的特征点的索引复制过来
		mGrid.resize(mnGridCols);
		for (int i = 0; i < mnGridCols; i++)
		{
			mGrid[i].resize(mnGridRows);
			for (int j = 0; j < mnGridRows; j++)
				mGrid[i][j] = F->mGrid[i][j];
		}

		// 设置当前关键帧的位姿
		SetPose(F->mTcw);
	}

	// 设置当前关键帧的位姿
	void KeyFrame::SetPose(const cv::Mat &Tcw_)
	{
		std::unique_lock<std::mutex> lock(mMutexPose);
		Tcw_.copyTo(Tcw);
		cv::Mat Rcw = Tcw.rowRange(0, 3).colRange(0, 3);
		cv::Mat tcw = Tcw.rowRange(0, 3).col(3);
		cv::Mat Rwc = Rcw.t();
		// 和普通帧中进行的操作相同
		Ow = -Rwc * tcw;

		// 计算当前位姿的逆
		Twc = cv::Mat::eye(4, 4, Tcw.type());
		Rwc.copyTo(Twc.rowRange(0, 3).colRange(0, 3));
		Ow.copyTo(Twc.rowRange(0, 3).col(3));

		// center为相机坐标系（左目）下，立体相机中心的坐标
		// 立体相机中心点坐标与左目相机坐标之间只是在x轴上相差mHalfBaseline,
		// 因此可以看出，立体相机中两个摄像头的连线为x轴，正方向为左目相机指向右目相机 (齐次坐标)
		cv::Mat center = (cv::Mat_<float>(4, 1) << mHalfBaseline, 0, 0, 1);
		// 世界坐标系下，左目相机中心到立体相机中心的向量，方向由左目相机指向立体相机中心
		Cw = Twc * center;
	}

	// 获取位姿
	cv::Mat KeyFrame::GetPose()
	{
		std::unique_lock<std::mutex> lock(mMutexPose);
		return Tcw.clone();
	}

	// 获取位姿的逆
	cv::Mat KeyFrame::GetPoseInverse()
	{
		std::unique_lock<std::mutex> lock(mMutexPose);
		return Twc.clone();
	}

	// 获取双目相机的中心,这个只有在可视化的时候才会用到
	cv::Mat KeyFrame::GetStereoCenter()
	{
		std::unique_lock<std::mutex> lock(mMutexPose);
		return Cw.clone();
	}

	// 获取姿态
	cv::Mat KeyFrame::GetRotation()
	{
		std::unique_lock<std::mutex> lock(mMutexPose);
		return Tcw.rowRange(0, 3).colRange(0, 3).clone();
	}

	// 获取位置
	cv::Mat KeyFrame::GetTranslation()
	{
		std::unique_lock<std::mutex> lock(mMutexPose);
		return Tcw.rowRange(0, 3).col(3).clone();
	}

	// 获取(左目)相机的中心在世界坐标系下的坐标
	cv::Mat KeyFrame::GetCameraCenter()
	{
		std::unique_lock<std::mutex> lock(mMutexPose);
		return Ow.clone();
	}

	// Add MapPoint to KeyFrame
	void KeyFrame::AddMapPoint(MapPoint *pMP, const size_t &idx)
	{
		std::unique_lock<std::mutex> lock(mMutexFeatures);
		mvpMapPoints[idx] = pMP;
	}

	/**
	 * @brief 由于其他的原因,导致当前关键帧观测到的某个地图点被删除(bad==true)了,将该地图点置为NULL
	 *
	 * @param[in] idx   地图点在该关键帧中的id
	 */
	void KeyFrame::EraseMapPointMatch(const size_t &idx)
	{
		std::unique_lock<std::mutex> lock(mMutexFeatures);
		// NOTE 使用这种方式表示其中的某个地图点被删除
		mvpMapPoints[idx] = static_cast<MapPoint*>(NULL);
	}

	// 同上
	void KeyFrame::EraseMapPointMatch(MapPoint *pMP)
	{
		//获取当前地图点在某个关键帧的观测中，对应的特征点的索引，如果没有观测，索引为-1
		int idx = pMP->GetIndexInKeyFrame(this);
		if (idx >= 0)
			mvpMapPoints[idx] = static_cast<MapPoint *>(NULL);
	}

	// 地图点的替换
	void KeyFrame::ReplaceMapPointMatch(const size_t &idx, MapPoint* pMP)
	{
		mvpMapPoints[idx] = pMP;
	}

	// 返回当前关键帧是否已经完蛋了
	bool KeyFrame::isBad()
	{
		std::unique_lock<std::mutex> lock(mMutexConnections);
		return mbBad;
	}

	// 判断某个点是否在当前关键帧的图像中
	bool KeyFrame::IsInImage(const float &x, const float &y) const
	{
		return (x >= mnMinX && x < mnMaxX && y >= mnMinY && y < mnMaxY);
	}

	// Compute Scene Depth (q=2 median). Used in monocular. 评估当前关键帧场景深度，q=2表示中值. 只是在单目情况下才会使用
	// 其实过程就是对当前关键帧下所有地图点的深度进行从小到大排序,返回距离头部其中1/q处的深度值作为当前场景的平均深度
	float KeyFrame::ComputeSceneMedianDepth(const int q)
	{
		cv::Mat Tcw_;
		{
			std::unique_lock<std::mutex> lock(mMutexFeatures);
			std::unique_lock<std::mutex> lock2(mMutexPose);
			Tcw_ = Tcw.clone();
		}

		std::vector<float> vDepths;
		cv::Mat Rcw2 = Tcw_.row(2).colRange(0, 3);
		Rcw2 = Rcw2.t();
		float zcw = Tcw_.at<float>(2, 3);
		// 遍历每一个地图点,计算并保存其在当前关键帧下的深度
		for (int i = 0; i < mvpMapPoints.size(); i++)
		{
			if (mvpMapPoints[i])
			{
				MapPoint* pMP = mvpMapPoints[i];
				cv::Mat x3Dw = pMP->GetWorldPos();
				float z = Rcw2.dot(x3Dw) + zcw; // (R*x3Dw+t)的第三行，即z
				vDepths.push_back(z);
			}
		}

		sort(vDepths.begin(), vDepths.end());
		return vDepths[(vDepths.size() - 1) / q];
	}

	// 关键帧中，大于等于最少观测数目minObs的MapPoints的数量.这些特征点被认为追踪到了
	int KeyFrame::TrackedMapPoints(const int &minObs)
	{
		std::unique_lock<std::mutex> lock(mMutexFeatures);

		int nPoints = 0;
		// 是否检查数目
		const bool bCheckObs = minObs > 0;
		// N是当前帧中特征点的个数
		for (int i = 0; i < mvKeys.size(); i++)
		{
			MapPoint* pMP = mvpMapPoints[i];
			if (pMP)     //没有被删除
			{
				if (!pMP->isBad())   //并且不是坏点
				{
					if (bCheckObs)
					{
						// 满足输入阈值要求的地图点计数加1
						if (mvpMapPoints[i]->Observations() >= minObs)
							nPoints++;
					}
					else
						nPoints++;
				}
			}
		}

		return nPoints;
	}

	// 获取当前关键帧的具体的某个地图点
	MapPoint* KeyFrame::GetMapPoint(const size_t &idx)
	{
		std::unique_lock<std::mutex> lock(mMutexFeatures);
		return mvpMapPoints[idx];
	}

	// 获取当前关键帧的具体的地图点
	std::vector<MapPoint*> KeyFrame::GetMapPointMatches()
	{
		std::unique_lock<std::mutex> lock(mMutexFeatures);
		return mvpMapPoints;
	}

	//获取当前关键帧的子关键帧
	std::set<KeyFrame*> KeyFrame::GetChilds()
	{
		std::unique_lock<std::mutex> lockCon(mMutexConnections);
		return mspChildrens;
	}

	//获取当前关键帧的父关键帧
	KeyFrame* KeyFrame::GetParent()
	{
		std::unique_lock<std::mutex> lockCon(mMutexConnections);
		return mpParent;
	}

	// 删除某个子关键帧
	void KeyFrame::EraseChild(KeyFrame *pKF)
	{
		std::unique_lock<std::mutex> lockCon(mMutexConnections);
		mspChildrens.erase(pKF);
	}

	// 改变当前关键帧的父关键帧
	void KeyFrame::ChangeParent(KeyFrame *pKF)
	{
		std::unique_lock<std::mutex> lockCon(mMutexConnections);
		// 添加双向连接关系
		mpParent = pKF;
		pKF->AddChild(this);
	}

	// 判断某个关键帧是否是当前关键帧的子关键帧
	bool KeyFrame::hasChild(KeyFrame *pKF)
	{
		std::unique_lock<std::mutex> lockCon(mMutexConnections);
		return mspChildrens.count(pKF);
	}

	// 得到与该关键帧连接的关键帧(已按权值排序)
	std::vector<KeyFrame*> KeyFrame::GetVectorCovisibleKeyFrames()
	{
		std::unique_lock<std::mutex> lock(mMutexConnections);
		return mvpOrderedConnectedKeyFrames;
	}

	/**
	 * @brief 得到与该关键帧连接的前N个最强共视关键帧(已按权值排序)
	 *
	 * @param[in] N                 设定要取出的关键帧数目
	 * @return vector<KeyFrame*>    满足权重条件的关键帧集合
	 */
	std::vector<KeyFrame*> KeyFrame::GetBestCovisibilityKeyFrames(const int &N)
	{
		std::unique_lock<std::mutex> lock(mMutexConnections);

		if ((int)mvpOrderedConnectedKeyFrames.size() < N)
			// 如果总数不够，就返回所有的关键帧
			return mvpOrderedConnectedKeyFrames;
		else
			// 取前N个最强共视关键帧
			return std::vector<KeyFrame*>(mvpOrderedConnectedKeyFrames.begin(), mvpOrderedConnectedKeyFrames.begin() + N);
	}

	// 得到该关键帧与pKF的权重
	int KeyFrame::GetWeight(KeyFrame *pKF)
	{
		std::unique_lock<std::mutex> lock(mMutexConnections);

		if (mConnectedKeyFrameWeights.count(pKF))
			return mConnectedKeyFrameWeights[pKF];
		else
			// 没有连接的话权重也就是共视点个数就是0
			return 0;
	}

	void KeyFrame::AddConnection(KeyFrame* pKF, const int &weight)
	{
		{
			// 互斥锁，防止同时操作共享数据产生冲突
			std::unique_lock<mutex> lock(mMutexConnections);

			// 新建或更新连接权重
			if (!mConnectedKeyFrameWeights.count(pKF))
				// count函数返回0，说明mConnectedKeyFrameWeights中没有pKF，新建连接
				mConnectedKeyFrameWeights[pKF] = weight;
			else if (mConnectedKeyFrameWeights[pKF] != weight)
				// 之前连接的权重不一样了，需要更新
				mConnectedKeyFrameWeights[pKF] = weight;
			else
				return;
		}

		// 连接关系变化就要更新最佳共视，主要是重新进行排序
		UpdateBestCovisibles();
	}

	/**
	 * @brief 按照权重从大到小对连接（共视）的关键帧进行排序
	 *
	 * 更新后的变量存储在mvpOrderedConnectedKeyFrames和mvOrderedWeights中
	 */
	void KeyFrame::UpdateBestCovisibles()
	{
		// 互斥锁，防止同时操作共享数据产生冲突
		std::unique_lock<mutex> lock(mMutexConnections);
		// http://stackoverflow.com/questions/3389648/difference-between-stdliststdpair-and-stdmap-in-c-stl (std::map 和 std::list<std::pair>的区别)

		std::vector<std::pair<int, KeyFrame*> > vPairs;
		vPairs.reserve(mConnectedKeyFrameWeights.size());
		// 取出所有连接的关键帧，mConnectedKeyFrameWeights的类型为std::map<KeyFrame*,int>，而vPairs变量将共视的地图点数放在前面，利于排序
		for (std::map<KeyFrame*, int>::iterator mit = mConnectedKeyFrameWeights.begin(), mend = mConnectedKeyFrameWeights.end(); mit != mend; mit++)
			vPairs.push_back(make_pair(mit->second, mit->first));

		// 为什么要用链表保存？因为插入和删除操作方便，只需要修改上一节点位置，不需要移动其他元素
		std::list<KeyFrame*> lKFs;   // 所有连接关键帧
		std::list<int> lWs;          // 所有连接关键帧对应的权重（共视地图点数目）
		for (size_t i = 0, iend = vPairs.size(); i < iend; i++)
		{
			// push_front 后变成从大到小
			lKFs.push_front(vPairs[i].second);
			lWs.push_front(vPairs[i].first);
		}

		// 权重从大到小排列的连接关键帧
		mvpOrderedConnectedKeyFrames = std::vector<KeyFrame*>(lKFs.begin(), lKFs.end());
		// 从大到小排列的权重，和mvpOrderedConnectedKeyFrames一一对应
		mvOrderedWeights = std::vector<int>(lWs.begin(), lWs.end());
	}

	/*
	 * 更新关键帧之间的连接图
	 *
	 * 1. 首先获得该关键帧的所有MapPoint点，统计观测到这些3d点的每个关键帧与其它所有关键帧之间的共视程度
	 *    对每一个找到的关键帧，建立一条边，边的权重是该关键帧与当前关键帧公共3d点的个数。
	 * 2. 并且该权重必须大于一个阈值，如果没有超过该阈值的权重，那么就只保留权重最大的边（与其它关键帧的共视程度比较高）
	 * 3. 对这些连接按照权重从大到小进行排序，以方便将来的处理
	 *    更新完covisibility图之后，如果没有初始化过，则初始化为连接权重最大的边（与其它关键帧共视程度最高的那个关键帧），类似于最大生成树
	 */
	void KeyFrame::UpdateConnections()
	{
		// 关键帧-权重，权重为其它关键帧与当前关键帧共视地图点的个数，也称为共视程度
		std::map<KeyFrame*, int> KFcounter;
		std::vector<MapPoint*> vpMP;

		{
			// 获得该关键帧的所有地图点
			std::unique_lock<std::mutex> lockMPs(mMutexFeatures);
			vpMP = mvpMapPoints;
		}

		// Step 1 通过地图点被关键帧观测来间接统计关键帧之间的共视程度
		// 统计每一个地图点都有多少关键帧与当前关键帧存在共视关系，统计结果放在KFcounter
		for (std::vector<MapPoint*>::iterator vit = vpMP.begin(), vend = vpMP.end(); vit != vend; vit++)
		{
			MapPoint* pMP = *vit;

			if (!pMP)
				continue;

			if (pMP->isBad())
				continue;

			// 对于每一个地图点，observations记录了可以观测到该地图点的所有关键帧
			std::map<KeyFrame*, size_t> observations = pMP->GetObservations();

			// 由于一个地图点可以被多个关键帧观测到,因此对于每一次观测,都对观测到这个地图点的关键帧进行累计投票
			// 这里的操作非常精彩！
			// map[key] = value，当要插入的键存在时，会覆盖键对应的原来的值。如果键不存在，则添加一组键值对
			// it->first 是地图点看到的关键帧，同一个关键帧看到的地图点会累加到该关键帧计数
			// 所以最后KFcounter 第一个参数表示某个关键帧，第2个参数表示该关键帧看到了多少当前帧(mCurrentFrame)的地图点，也就是共视程度
			for (std::map<KeyFrame*, size_t>::const_iterator it = observations.begin(), itend = observations.end(); it != itend; it++)
				KFcounter[it->first]++;
		}

		// 没有共视关系，直接退出 
		if (KFcounter.empty())
			return;

		int nmax = 0; // 记录最高的共视程度
		KeyFrame* pKFmax = NULL;
		// 至少有15个共视地图点才会添加共视关系
		int th = 15;

		// vPairs记录与其它关键帧共视帧数大于th的关键帧
		// pair<int,KeyFrame*>将关键帧的权重写在前面，关键帧写在后面方便后面排序
		std::vector<std::pair<int, KeyFrame*> > vPairs;
		vPairs.reserve(KFcounter.size());
		// Step 2 找到对应权重最大的关键帧（共视程度最高的关键帧）
		for (std::map<KeyFrame*, int>::iterator mit = KFcounter.begin(), mend = KFcounter.end(); mit != mend; mit++)
		{
			if (mit->second > nmax)
			{
				nmax = mit->second;
				pKFmax = mit->first;
			}

			// 建立共视关系至少需要大于等于th个共视地图点
			if (mit->second >= th)
			{
				// 对应权重需要大于阈值，对这些关键帧建立连接
				vPairs.push_back(make_pair(mit->second, mit->first));
				// 对方关键帧也要添加这个信息
				// 更新KFcounter中该关键帧的mConnectedKeyFrameWeights
				// 更新其它KeyFrame的mConnectedKeyFrameWeights，更新其它关键帧与当前帧的连接权重
				(mit->first)->AddConnection(this, mit->second);
			}
		}

		//  Step 3 如果没有超过阈值的权重，则对权重最大的关键帧建立连接
		if (vPairs.empty())
		{
			// 如果每个关键帧与它共视的关键帧的个数都少于th，
			// 那就只更新与其它关键帧共视程度最高的关键帧的mConnectedKeyFrameWeights
			// 这是对之前th这个阈值可能过高的一个补丁
			vPairs.push_back(make_pair(nmax, pKFmax));
			pKFmax->AddConnection(this, nmax);
		}

		// Step 4 对满足共视程度的关键帧对更新连接关系及权重（从大到小）
		// vPairs里存的都是相互共视程度比较高的关键帧和共视权重，接下来由大到小进行排序
		std::sort(vPairs.begin(), vPairs.end());                // sort函数默认升序排列
		// 将排序后的结果分别组织成为两种数据类型
		std::list<KeyFrame*> lKFs;
		std::list<int> lWs;
		for (size_t i = 0; i < vPairs.size(); i++)
		{
			// push_front 后变成了从大到小顺序
			lKFs.push_front(vPairs[i].second);
			lWs.push_front(vPairs[i].first);
		}

		{
			std::unique_lock<std::mutex> lockCon(mMutexConnections);

			// 更新当前帧与其它关键帧的连接权重
			mConnectedKeyFrameWeights = KFcounter;
			mvpOrderedConnectedKeyFrames = std::vector<KeyFrame*>(lKFs.begin(), lKFs.end());
			mvOrderedWeights = std::vector<int>(lWs.begin(), lWs.end());

			// Step 5 更新生成树的连接
			if (mbFirstConnection && mnId != 0)
			{
				// 初始化该关键帧的父关键帧为共视程度最高的那个关键帧
				mpParent = mvpOrderedConnectedKeyFrames.front();
				// 建立双向连接关系，将当前关键帧作为其子关键帧
				mpParent->AddChild(this);
				mbFirstConnection = false;
			}
		}
	}

	// 添加子关键帧（即和子关键帧具有最大共视关系的关键帧就是当前关键帧）
	void KeyFrame::AddChild(KeyFrame *pKF)
	{
		std::unique_lock<std::mutex> lockCon(mMutexConnections);
		mspChildrens.insert(pKF);
	}

	/**
	 * @brief 真正地执行删除关键帧的操作
	 * 需要删除的是该关键帧和其他所有帧、地图点之间的连接关系
	 *
	 * mbNotErase作用：表示要删除该关键帧及其连接关系但是这个关键帧有可能正在回环检测或者计算sim3操作，这时候虽然这个关键帧冗余，但是却不能删除，
	 * 仅设置mbNotErase为true，这时候调用setbadflag函数时，不会将这个关键帧删除，只会把mbTobeErase变成true，代表这个关键帧可以删除但不到时候,先记下来以后处理。
	 * 在闭环线程里调用 SetErase()会根据mbToBeErased 来删除之前可以删除还没删除的帧。
	 */
	void KeyFrame::SetBadFlag()
	{
		// Step 1 首先处理一下删除不了的特殊情况
		{
			std::unique_lock<std::mutex> lock(mMutexConnections);

			// 第0关键帧不允许被删除
			if (mnId == 0)
				return;
			else if (mbNotErase)
			{
				// mbNotErase表示不应该删除，于是把mbToBeErased置为true，假装已经删除，其实没有删除
				mbToBeErased = true;
				return;
			}
		}

		// Step 2 遍历所有和当前关键帧相连的关键帧，删除他们与当前关键帧的联系
		for (std::map<KeyFrame*, int>::iterator mit = mConnectedKeyFrameWeights.begin(), mend = mConnectedKeyFrameWeights.end(); mit != mend; mit++)
			mit->first->EraseConnection(this); // 让其它的关键帧删除与自己的联系

		// Step 3 遍历每一个当前关键帧的地图点，删除每一个地图点和当前关键帧的联系
		for (size_t i = 0; i < mvpMapPoints.size(); i++)
			if (mvpMapPoints[i])
				mvpMapPoints[i]->EraseObservation(this);

		{
			std::unique_lock<std::mutex> lock(mMutexConnections);
			std::unique_lock<std::mutex> lock1(mMutexFeatures);

			// 清空自己与其它关键帧之间的联系
			mConnectedKeyFrameWeights.clear();
			mvpOrderedConnectedKeyFrames.clear();

			// Step 4 更新生成树，主要是处理好父子关键帧，不然会造成整个关键帧维护的图断裂，或者混乱
			// 候选父关键帧
			std::set<KeyFrame*> sParentCandidates;
			// 将当前帧的父关键帧放入候选父关键帧
			sParentCandidates.insert(mpParent);

			// 每迭代一次就为其中一个子关键帧寻找父关键帧（最高共视程度），找到父的子关键帧可以作为其他子关键帧的候选父关键帧
			while (!mspChildrens.empty())
			{
				bool bContinue = false;

				int max = -1;
				KeyFrame* pC;
				KeyFrame* pP;

				// Step 4.1 遍历每一个子关键帧，让它们更新它们指向的父关键帧
				for (std::set<KeyFrame*>::iterator sit = mspChildrens.begin(), send = mspChildrens.end(); sit != send; sit++)
				{
					KeyFrame* pKF = *sit;
					// 跳过无效的子关键帧
					if (pKF->isBad())
						continue;

					// Step 4.2 子关键帧遍历每一个与它共视的关键帧    
					std::vector<KeyFrame*> vpConnected = pKF->GetVectorCovisibleKeyFrames();

					for (size_t i = 0, iend = vpConnected.size(); i < iend; i++)
					{
						// sParentCandidates 中刚开始存的是这里子关键帧的“爷爷”，也是当前关键帧的候选父关键帧
						for (set<KeyFrame*>::iterator spcit = sParentCandidates.begin(), spcend = sParentCandidates.end(); spcit != spcend; spcit++)
						{
							// Step 4.3 如果孩子和sParentCandidates中有共视，选择共视最强的那个作为新的父
							if (vpConnected[i]->mnId == (*spcit)->mnId)
							{
								int w = pKF->GetWeight(vpConnected[i]);
								// 寻找并更新权值最大的那个共视关系
								if (w > max)
								{
									pC = pKF;                   //子关键帧
									pP = vpConnected[i];        //目前和子关键帧具有最大权值的关键帧（将来的父关键帧） 
									max = w;                    //这个最大的权值
									bContinue = true;           //说明子节点找到了可以作为其新父关键帧的帧
								}
							}
						}
					}
				}

				// Step 4.4 如果在上面的过程中找到了新的父节点
				// 下面代码应该放到遍历子关键帧循环中?
				// 回答：不需要！这里while循环还没退出，会使用更新的sParentCandidates
				if (bContinue)
				{
					// 因为父节点死了，并且子节点找到了新的父节点，就把它更新为自己的父节点
					pC->ChangeParent(pP);
					// 因为子节点找到了新的父节点并更新了父节点，那么该子节点升级，作为其它子节点的备选父节点
					sParentCandidates.insert(pC);
					// 该子节点处理完毕，删掉
					mspChildrens.erase(pC);
				}
				else
					break;

			}

			// Step 4.5 如果还有子节点没有找到新的父节点
			if (!mspChildrens.empty())
				for (set<KeyFrame*>::iterator sit = mspChildrens.begin(); sit != mspChildrens.end(); sit++)
				{
					// 直接把父节点的父节点作为自己的父节点 即对于这些子节点来说,他们的新的父节点其实就是自己的爷爷节点
					(*sit)->ChangeParent(mpParent);
				}

			mpParent->EraseChild(this);
			// mTcp 表示原父关键帧到当前关键帧的位姿变换，在保存位姿的时候使用
			mTcp = Tcw * mpParent->GetPoseInverse();
			// 标记当前关键帧已经挂了
			mbBad = true;
		}

		// 地图和关键帧数据库中删除该关键帧
		mpMap->EraseKeyFrame(this);
	}

	// 删除当前关键帧和指定关键帧之间的共视关系
	void KeyFrame::EraseConnection(KeyFrame* pKF)
	{
		// 其实这个应该表示是否真的是有共视关系
		bool bUpdate = false;

		{
			std::unique_lock<std::mutex> lock(mMutexConnections);
			if (mConnectedKeyFrameWeights.count(pKF))
			{
				mConnectedKeyFrameWeights.erase(pKF);
				bUpdate = true;
			}
		}

		// 如果是真的有共视关系,那么删除之后就要更新共视关系
		if (bUpdate)
			UpdateBestCovisibles();
	}

	// 获取某个特征点的邻域中的特征点id,其实这个和 Frame.cc 中的那个函数基本上都是一致的; r为边长（半径）
	std::vector<size_t> KeyFrame::GetFeaturesInArea(const float &x, const float &y, const float &r) const
	{
		std::vector<size_t> vIndices;
		vIndices.reserve(mvKeys.size());

		// 计算要搜索的cell的范围

		// floor向下取整，mfGridElementWidthInv 为每个像素占多少个格子
		const int nMinCellX = max(0, (int)floor((x - mnMinX - r)*mfGridElementWidthInv));
		if (nMinCellX >= mnGridCols)
			return vIndices;

		// ceil向上取整
		const int nMaxCellX = min((int)mnGridCols - 1, (int)ceil((x - mnMinX + r)*mfGridElementWidthInv));
		if (nMaxCellX < 0)
			return vIndices;

		const int nMinCellY = max(0, (int)floor((y - mnMinY - r)*mfGridElementHeightInv));
		if (nMinCellY >= mnGridRows)
			return vIndices;

		const int nMaxCellY = min((int)mnGridRows - 1, (int)ceil((y - mnMinY + r)*mfGridElementHeightInv));
		if (nMaxCellY < 0)
			return vIndices;

		// 遍历每个cell,取出其中每个cell中的点,并且每个点都要计算是否在邻域内
		for (int ix = nMinCellX; ix <= nMaxCellX; ix++)
		{
			for (int iy = nMinCellY; iy <= nMaxCellY; iy++)
			{
				const vector<size_t> vCell = mGrid[ix][iy];
				for (size_t j = 0, jend = vCell.size(); j < jend; j++)
				{
					const cv::KeyPoint &kpUn = mvKeys[vCell[j]];
					const float distx = kpUn.pt.x - x;
					const float disty = kpUn.pt.y - y;

					if (fabs(distx) < r && fabs(disty) < r)
						vIndices.push_back(vCell[j]);
				}
			}
		}

		return vIndices;
	}

}